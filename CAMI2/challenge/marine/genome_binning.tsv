DOI	DirectLink	Software	Version	CAMIAnonymousName	Creator	DockerHubId	GitHubRepo	BiocondaRecipe	CommandUsed	Description
new	new	Autometa	cami2/03e0d77	sharp_bardeen_0	Ian J. Miller, Evan R. Rees, Jennifer Ross, Izaak Miller, Jared Baxa,  Juan Lopera, Robert L. Kerby, Federico E. Rey, Jason C. Kwan	jasonkwan/autometa:cami2	https://bitbucket.org/jason_c_kwan/autometa/src/cami2/	nan	run_autometa.py --assembly marmgCAMI2_short_read_pooled_gold_standard_assembly.fasta.gz --i_reads marmgCAMI2_short_reads.fq.gz --db_dir CAMI2_databases --maketaxtable --length_cutoff 3000 --processors 10 --output_dir binning	"nr database provided must first be formatted into a diamond database with `diamond makedb`. Note, when applicable, if Archaea and Bacteria are detected. Both are binned and concatenated with distinct bin names into the final output file. Contigs remaining unclustered by Autometa are classified under ""bin_0.""  "
new	new	Autometa	cami2/03e0d77	grave_torvalds_1	Ian J. Miller, Evan R. Rees, Jennifer Ross, Izaak Miller, Jared Baxa,  Juan Lopera, Robert L. Kerby, Federico E. Rey, Jason C. Kwan	jasonkwan/autometa/cami2	https://bitbucket.org/jason_c_kwan/autometa/src/cami2/	nan	run_autometa.py -a marmgCAMI2_short_read_pooled_gold_standard_ assembly.fasta.gz -i marmgCAMI2_short_reads.fq.gz -o . -m --HGT -p 10 -l 3000 -db 2019.01.09.cami2challenge.db/	"nr database provided must first be formatted into a diamond database with `diamond makedb`. Note, when applicable, if Archaea and Bacteria are detected. Both are binned and concatenated with distinct bin names into the final output file. Contigs remaining unclustered by Autometa are classified under ""bin_0.""  This is the binning of the marine gold assembly."
new	new	Ganon	v0.1.4	grave_ritchie_0	Vitor C. Piro, Temesgen H. Dadi, Enrico Seiler, Knut Reinert, Bernhard Y. Renard	nan	https://github.com/pirovc/ganon	nan	The workflow is described at https://github.com/mirand863/ganon_cami2	Ganon is a k-mer based read classification tool which uses Interleaved Bloom Filters in conjunction with a taxonomic clustering and a k-mer counting-filtering scheme. All 10 samples were used in this submission (0-9).
new	new	MaxBin	v2.2.7	elated_bardeen_0	Wu et al.	nan	nan	nan	./run_MaxBin.pl -contig marmgCAMI2_short_read_pooled_gold_standard_assembly.fasta -out output.out -reads marmgCAMI2_short_read_sample_0_reads.fq -reads2 marmgCAMI2_short_read_sample_1_reads.fq -reads3 marmgCAMI2_short_read_sample_2_reads.fq -reads4 marmgCAMI2_short_read_sample_3_reads.fq -reads5 marmgCAMI2_short_read_sample_4_reads.fq -reads6 marmgCAMI2_short_read_sample_5_reads.fq -reads7 marmgCAMI2_short_read_sample_6_reads.fq -reads8 marmgCAMI2_short_read_sample_7_reads.fq -reads9 marmgCAMI2_short_read_sample_8_reads.fq -reads10 marmgCAMI2_short_read_sample_9_reads.fq -thread 16	Genome binning of marmgCAMI2_short_read_pooled_gold_standard_assembly.fasta. Used the short reads of all samples as input as well.
new	new	MetaBAT2	v2.13-33-g236d20e	sleepy_ptolemy_0	Dongwan Kang, Feng Li, Edward S Kirton, Ashleigh Thomas, Rob S Egan, Hong An, Zhong Wang	metabat/metabat	https://bitbucket.org/berkeleylab/metabat/src/master/	nan	nan	gold assembly short+long reads minimum_length 1500
new	new	MetaBAT2	v2.13-33-g236d20e	sleepy_ptolemy_1	Dongwan Kang, Feng Li, Edward S Kirton, Ashleigh Thomas, Rob S Egan, Hong An, Zhong Wang	metabat/metabat	https://bitbucket.org/berkeleylab/metabat/src/master/	nan	nan	gold assembly short+long reads minimum_length 2500
new	new	MetaBAT2	v2.13-33-g236d20e	sleepy_ptolemy_2	Dongwan Kang, Feng Li, Edward S Kirton, Ashleigh Thomas, Rob S Egan, Hong An, Zhong Wang	metabat/metabat	https://bitbucket.org/berkeleylab/metabat/src/master/	nan	nan	gold assembly long reads minimum_length 1500
new	new	MetaBAT2	v2.13-33-g236d20e	sleepy_ptolemy_3	Dongwan Kang, Feng Li, Edward S Kirton, Ashleigh Thomas, Rob S Egan, Hong An, Zhong Wang	metabat/metabat	https://bitbucket.org/berkeleylab/metabat/src/master/	nan	nan	gold assembly long reads minimum_length 2500
new	new	MetaBAT2	v2.13-33-g236d20e	sleepy_ptolemy_4	Dongwan Kang, Feng Li, Edward S Kirton, Ashleigh Thomas, Rob S Egan, Hong An, Zhong Wang	metabat/metabat	https://bitbucket.org/berkeleylab/metabat/src/master/	nan	nan	gold assembly short reads minimum_length 1500
new	new	MetaBAT2	v2.13-33-g236d20e	sleepy_ptolemy_4	Dongwan Kang, Feng Li, Edward S Kirton, Ashleigh Thomas, Rob S Egan, Hong An, Zhong Wang	metabat/metabat	https://bitbucket.org/berkeleylab/metabat/src/master/	nan	nan	gold assembly short reads minimum_length 2500
new	new	MetaBAT2	v2.13-33-g236d20e	sleepy_ptolemy_5	Dongwan Kang, Feng Li, Edward S Kirton, Ashleigh Thomas, Rob S Egan, Hong An, Zhong Wang	metabat/metabat	https://bitbucket.org/berkeleylab/metabat/src/master/	nan	nan	megahit assembly short+long reads minimum_length 1500
new	new	MetaBAT2	v2.13-33-g236d20e	sleepy_ptolemy_7	Dongwan Kang, Feng Li, Edward S Kirton, Ashleigh Thomas, Rob S Egan, Hong An, Zhong Wang	metabat/metabat	https://bitbucket.org/berkeleylab/metabat/src/master/	nan	nan	megahit assembly short+long reads minimum_length 2500
new	new	MetaBAT2	v2.13-33-g236d20e	sleepy_ptolemy_8	Dongwan Kang, Feng Li, Edward S Kirton, Ashleigh Thomas, Rob S Egan, Hong An, Zhong Wang	metabat/metabat	https://bitbucket.org/berkeleylab/metabat/src/master/	nan	nan	megahit assembly long reads minimum_length 1500
new	new	MetaBAT2	v2.13-33-g236d20e	sleepy_ptolemy_9	Dongwan Kang, Feng Li, Edward S Kirton, Ashleigh Thomas, Rob S Egan, Hong An, Zhong Wang	metabat/metabat	https://bitbucket.org/berkeleylab/metabat/src/master/	nan	nan	megahit assembly long reads minimum_length 2500
new	new	MetaBAT2	v2.13-33-g236d20e	sleepy_ptolemy_10	Dongwan Kang, Feng Li, Edward S Kirton, Ashleigh Thomas, Rob S Egan, Hong An, Zhong Wang	metabat/metabat	https://bitbucket.org/berkeleylab/metabat/src/master/	nan	nan	megahit assembly short reads minimum_length 1500
new	new	MetaBAT2	v2.13-33-g236d20e	sleepy_ptolemy_11	Dongwan Kang, Feng Li, Edward S Kirton, Ashleigh Thomas, Rob S Egan, Hong An, Zhong Wang	metabat/metabat	https://bitbucket.org/berkeleylab/metabat/src/master/	nan	nan	megahit assembly short reads minimum_length 2500
new	new	MetaBinner	MetaBinner v1.0	furious_ardinghelli_3	Ziye Wang, Ronghui You, Pingqin Huang, Zhengyang Wang, Fengzhu Sun, Shanfeng Zhu	nan	https://github.com/ziyewang/MetaBinner	nan	OPENBLAS_NUM_THREADS=2 python Metabinner.py --contig_file input_path/marmgCAMI2_short_read_pooled_gold_standard_assembly_1000.fa --coverage_profiles input_path/coverage_new_f1000_sr.tsv --composition_profiles input_path/kmer_4_f1000.csv --output output_path/marine_gold_f1k_metabinner_result.tsv --log output_path/result.log --use_hmm --hmm_icm_path path_to_MetaBinner/hmm_data/hmm/ --pacbio_read_profiles input_path/coverage_new_f1000_pb.tsv	The method imporves the performance of large scale binning with ensemble K-means by considering multiple types of features. DAS_tool is utilized to obtain the ensemble result. Our tool will recluster the remained contig after using das_tool. It  takes the contig lengths and single-copy marker genes into consideration. CheckM is applied for post-processing. samples used: Simulated long read and short read shotgun metagenome data and marmgCAMI2_short_read_pooled_gold_standard_assembly.fasta #code to generate input files #./gen_cov.sh #need do some slight changes, scripts/gen_cov.sh (to get coverage_new.tsv) #move the coverage_new.tsv to the input path #./run.sh /input/marmgCAMI2_short_read_pooled_gold_standard_assembly.fasta 1000 4 #details are shown in Github repo
new	new	MetaBinner	MetaBinner v1.0	furious_ardinghelli_4	Ziye Wang, Ronghui You, Pingqin Huang, Zhengyang Wang, Fengzhu Sun, Shanfeng Zhu	nan	https://github.com/ziyewang/MetaBinner	nan	OPENBLAS_NUM_THREADS=2 python Metabinner.py --contig_file input_path/andmarmgCAMI2_short_read_pooled_megahit_assembly_1000.fa --coverage_profiles input_path/coverage_new_f1000_sr.tsv --composition_profiles input_path/kmer_4_f1000.csv --output output_path/marine_megahit_assembly_f1k_result.tsv --log output_path/result.log --use_hmm --hmm_icm_path path_to_MetaBinner/hmm_data/hmm/ --pacbio_read_profiles input_path/coverage_new_f1000_pb.tsv	The method imporves the performance of large scale binning with ensemble K-means by considering multiple types of features. DAS_tool is utilized to obtain the ensemble result. Our tool will recluster the remained contig after using das_tool. It  takes the contig lengths and single-copy marker genes into consideration. CheckM is applied for post-processing. samples used: Simulated long read and short read shotgun metagenome data andmarmgCAMI2_short_read_pooled_megahit_assembly.fasta #code to generate input files #./gen_cov.sh #need do some slight changes, scripts/gen_cov.sh (to get coverage_new.tsv) #move the coverage_new.tsv to the input path #./run.sh /input/marmgCAMI2_short_read_pooled_megahit_assembly.fasta 1000 4 #details are shown in Github repo #contigs length threshold: 1000
new	new	MetaBinner	MetaBinner v1.0	furious_ardinghelli_5	Ziye Wang, Ronghui You, Pingqin Huang, Zhengyang Wang, Fengzhu Sun, Shanfeng Zhu	nan	https://github.com/ziyewang/MetaBinner	nan	OPENBLAS_NUM_THREADS=2 python Metabinner.py --contig_file input_path/andmarmgCAMI2_short_read_pooled_megahit_assembly_1000.fa --coverage_profiles input_path/coverage_new_f1000_sr.tsv --composition_profiles input_path/kmer_4_f1000.csv --output output_path/marine_megahit_assembly_f1k_k486_result.tsv --log output_path/result.log --use_hmm --hmm_icm_path path_to_MetaBinner/hmm_data/hmm/ --pacbio_read_profiles input_path/coverage_new_f1000_pb.tsv --clusters 486	The method imporves the performance of large scale binning with ensemble K-means by considering multiple types of features. DAS_tool is utilized to obtain the ensemble result. Our tool will recluster the remained contig after using das_tool. It  takes the contig lengths and single-copy marker genes into consideration. CheckM is applied for post-processing. samples used: Simulated long read and short read shotgun metagenome data andmarmgCAMI2_short_read_pooled_megahit_assembly.fasta #code to generate input files #./gen_cov.sh #need do some slight changes, scripts/gen_cov.sh (to get coverage_new.tsv) #move the coverage_new.tsv to the input path #./run.sh /input/marmgCAMI2_short_read_pooled_megahit_assembly.fasta 1000 4 #details are shown in Github repo #contigs length threshold: 1000; --clusters 486
new	new	MetaBinner	MetaBinner v1.0	furious_ardinghelli_6	Ziye Wang, Ronghui You, Pingqin Huang, Zhengyang Wang, Fengzhu Sun, Shanfeng Zhu	nan	https://github.com/ziyewang/MetaBinner	nan	OPENBLAS_NUM_THREADS=2 python Metabinner.py --contig_file input_path/andmarmgCAMI2_short_read_pooled_megahit_assembly_500.fa --coverage_profiles input_path/coverage_new_f500_sr.tsv --composition_profiles input_path/kmer_4_f500.csv --output output_path/marine_megahit_f500_metabinner_result.tsv --log output_path/result.log --use_hmm --hmm_icm_path path_to_MetaBinner/hmm_data/hmm/ --pacbio_read_profiles input_path/coverage_new_f500_pb.tsv	The method imporves the performance of large scale binning with ensemble K-means by considering multiple types of features. DAS_tool is utilized to obtain the ensemble result. Our tool will recluster the remained contig after using das_tool. It  takes the contig lengths and single-copy marker genes into consideration. CheckM is applied for post-processing. samples used: Simulated long read and short read shotgun metagenome data andmarmgCAMI2_short_read_pooled_megahit_assembly.fasta #code to generate input files #./gen_cov.sh #need do some slight changes, scripts/gen_cov.sh (to get coverage_new.tsv) #move the coverage_new.tsv to the input path #./run.sh /input/marmgCAMI2_short_read_pooled_megahit_assembly.fasta 500 4 #details are shown in Github repo #contigs length threshold: 500
new	new	MetaBinner	MetaBinner v1.0	furious_ardinghelli_10	Ziye Wang, Ronghui You, Pingqin Huang, Zhengyang Wang, Fengzhu Sun, Shanfeng Zhu	nan	https://github.com/ziyewang/MetaBinner	nan	OPENBLAS_NUM_THREADS=2 python Metabinner.py --contig_file input_path/andmarmgCAMI2_short_read_pooled_megahit_assembly_1000.fa --coverage_profiles input_path/coverage_new_f1000_sr.tsv --composition_profiles input_path/kmer_4_f1000.csv --output output_path/marine_megahit_assembly_f1k_k564_result.tsv --log output_path/result.log --use_hmm --hmm_icm_path path_to_MetaBinner/hmm_data/hmm/ --pacbio_read_profiles input_path/coverage_new_f1000_pb.tsv --clusters 564	The method imporves the performance of large scale binning with ensemble K-means by considering multiple types of features. DAS_tool is utilized to obtain the ensemble result. Our tool will recluster the remained contig after using das_tool. It  takes the contig lengths and single-copy marker genes into consideration. CheckM is applied for post-processing. samples used: Simulated long read and short read shotgun metagenome data andmarmgCAMI2_short_read_pooled_megahit_assembly.fasta #code to generate input files #./gen_cov.sh #need do some slight changes, scripts/gen_cov.sh (to get coverage_new.tsv) #move the coverage_new.tsv to the input path #./run.sh /input/marmgCAMI2_short_read_pooled_megahit_assembly.fasta 1000 4 #details are shown in Github repo #contigs length threshold: 1000; --clusters 564
new	new	MetaBinner	MetaBinner v1.0	furious_ardinghelli_11	Ziye Wang, Ronghui You, Pingqin Huang, Zhengyang Wang, Fengzhu Sun, Shanfeng Zhu	nan	https://github.com/ziyewang/MetaBinner	nan	OPENBLAS_NUM_THREADS=2 python Metabinner_bacar_marker_seed_only.py --contig_file input_path/marmgCAMI2_short_read_pooled_megahit_assembly_1000.fa --coverage_profiles input_path/coverage_new_f1000_sr.tsv --composition_profiles input_path/kmer_4_f1000.csv --output output_path/marine_megahit_assembly_f1000_bacer_marker_k564_result.tsv --log output_path/result.log --use_hmm --hmm_icm_path path_to_MetaBinner/hmm_data/hmm/ --pacbio_read_profiles input_path/coverage_f1000_pb.tsv --clusters 564	The method imporves the performance of large scale binning with ensemble K-means by considering multiple types of features. DAS_tool is utilized to obtain the ensemble result. Our tool will recluster the remained contig after using das_tool. It  takes the contig lengths and single-copy marker genes into consideration. CheckM is applied for post-processing. samples used: Simulated long read and short read shotgun metagenome data andmarmgCAMI2_short_read_pooled_megahit_assembly.fasta #code to generate input files #./gen_cov.sh #need do some slight changes, scripts/gen_cov.sh (to get coverage_new.tsv) #move the coverage_new.tsv to the input path #./run.sh /input/marmgCAMI2_short_read_pooled_megahit_assembly.fasta 1000 4 #details are shown in Github repo #contigs length threshold: 1000；backer seed marker
new	new	MetaBinner	MetaBinner v1.0	furious_ardinghelli_12	Ziye Wang, Ronghui You, Pingqin Huang, Zhengyang Wang, Fengzhu Sun, Shanfeng Zhu	nan	https://github.com/ziyewang/MetaBinner	nan	OPENBLAS_NUM_THREADS=2 python Metabinner.py --contig_file input_path/marmgCAMI2_short_read_pooled_gold_standard_assembly_1000.fa --coverage_profiles input_path/coverage_new_f1000_sr.tsv --composition_profiles input_path/kmer_4_f1000.csv --output output_path/marine_gold_f1k_metabinner_result.tsv --log output_path/result.log --use_hmm --hmm_icm_path path_to_MetaBinner/hmm_data/hmm/ --pacbio_read_profiles input_path/coverage_new_f1000_pb.tsv --binscore 0.2	The method imporves the performance of large scale binning with ensemble K-means by considering multiple types of features. DAS_tool is utilized to obtain the ensemble result. Our tool will recluster the remained contig after using das_tool. It  takes the contig lengths and single-copy marker genes into consideration. CheckM is applied for post-processing. samples used: Simulated long read and short read shotgun metagenome data and marmgCAMI2_short_read_pooled_gold_standard_assembly.fasta #code to generate input files #./gen_cov.sh #need do some slight changes, scripts/gen_cov.sh (to get coverage_new.tsv) #move the coverage_new.tsv to the input path #./run.sh /input/marmgCAMI2_short_read_pooled_gold_standard_assembly.fasta 1000 4 #details are shown in Github repo #difference: --binscore 0.2
new	new	MetaBinner	MetaBinner v1.0	furious_ardinghelli_14	Ziye Wang, Ronghui You, Pingqin Huang, Zhengyang Wang, Fengzhu Sun, Shanfeng Zhu	nan	https://github.com/ziyewang/MetaBinner	nan	OPENBLAS_NUM_THREADS=2 python Metabinner.py --contig_file input_path/andmarmgCAMI2_short_read_pooled_megahit_assembly_1000.fa --coverage_profiles input_path/coverage_new_f1000_sr.tsv --composition_profiles input_path/kmer_4_f1000.csv --output output_path/marine_megahit_assembly_f1k_k564_binscore02_result.tsv --log output_path/result.log --use_hmm --hmm_icm_path path_to_MetaBinner/hmm_data/hmm/ --pacbio_read_profiles input_path/coverage_new_f1000_pb.tsv --clusters 564 --binscore 0.2	The method imporves the performance of large scale binning with ensemble K-means by considering multiple types of features. DAS_tool is utilized to obtain the ensemble result. Our tool will recluster the remained contig after using das_tool. It  takes the contig lengths and single-copy marker genes into consideration. CheckM is applied for post-processing. samples used: Simulated long read and short read shotgun metagenome data and marmgCAMI2_short_read_pooled_megahit_assembly.fasta #code to generate input files #./gen_cov.sh #need do some slight changes, scripts/gen_cov.sh (to get coverage_new.tsv) #move the coverage_new.tsv to the input path #./run.sh /input/marmgCAMI2_short_read_pooled_megahit_assembly.fasta 1000 4 #details are shown in Github repo #contigs length threshold: 1000; --clusters 564; --binscore 0.2
new	new	MetaBinner	MetaBinner v1.0	furious_ardinghelli_18	Ziye Wang, Ronghui You, Pingqin Huang, Zhengyang Wang, Fengzhu Sun, Shanfeng Zhu	nan	https://github.com/ziyewang/MetaBinner	nan	OPENBLAS_NUM_THREADS=2 python Metabinner.py --contig_file input_path/marmgCAMI2_short_read_pooled_gold_standard_assembly_1000.fa --coverage_profiles input_path/coverage_new_f1000_sr.tsv --composition_profiles input_path/kmer_4_f1000.csv --output output_path/marine_gold_assembly_metabinner_f1k_short_read_only_result.tsv --log output_path/result.log --use_hmm --hmm_icm_path path_to_MetaBinner/hmm_data/hmm/ 	The method imporves the performance of large scale binning with ensemble K-means by considering multiple types of features. DAS_tool is utilized to obtain the ensemble result. Our tool will recluster the remained contig after using das_tool. It  takes the contig lengths and single-copy marker genes into consideration. CheckM is applied for post-processing. samples used: Simulated short read shotgun metagenome data and marmgCAMI2_short_read_pooled_gold_standard_assembly.fasta #code to generate input files #./gen_cov.sh #need do some slight changes, scripts/gen_cov.sh (to get coverage_new.tsv) #move the coverage_new.tsv to the input path #./run.sh /input/marmgCAMI2_short_read_pooled_gold_standard_assembly.fasta 1000 4 #details are shown in Github repo #contigs length threshold: 1000; only short reads
new	new	MetaBinner	MetaBinner v1.0	furious_ardinghelli_19	Ziye Wang, Ronghui You, Pingqin Huang, Zhengyang Wang, Fengzhu Sun, Shanfeng Zhu	nan	https://github.com/ziyewang/MetaBinner	nan	OPENBLAS_NUM_THREADS=2 python Metabinner.py --contig_file input_path/andmarmgCAMI2_short_read_pooled_megahit_assembly_1000.fa --coverage_profiles input_path/coverage_new_f1000_sr.tsv --composition_profiles input_path/kmer_4_f1000.csv --output output_path/marine_megahit_assembly_f1k_k564_short_read_only_result.tsv --log output_path/result.log --use_hmm --hmm_icm_path path_to_MetaBinner/hmm_data/hmm/ --clusters 564	The method imporves the performance of large scale binning with ensemble K-means by considering multiple types of features. DAS_tool is utilized to obtain the ensemble result. Our tool will recluster the remained contig after using das_tool. It  takes the contig lengths and single-copy marker genes into consideration. CheckM is applied for post-processing. samples used: Simulated short read shotgun metagenome data and marmgCAMI2_short_read_pooled_megahit_assembly.fasta #code to generate input files #./gen_cov.sh #need do some slight changes, scripts/gen_cov.sh (to get coverage_new.tsv) #move the coverage_new.tsv to the input path #./run.sh /input/marmgCAMI2_short_read_pooled_megahit_assembly.fasta 1000 4 #details are shown in Github repo #contigs length threshold: 1000; --clusters 564; only use short reads
new	new	MetaWRAP	v1.2.3	clever_bohr_0	nan	https://quay.io/repository/biocontainers/metawrap?tab=tags	https://github.com/bxlab/metaWRAP	metawrap	`metawrap binning -a assembly.fasta -t 20 -m 1000 -l 500 -o initial_binning --metabat2 --metabat1 --maxbin2 --concoct --run-checkm READS/*`, `metawrap bin_refinement -o refinement -t 20 -m 1000 -c 50 -x 10 -A initial_binning/metabat2_bins -B initial_binning/maxbin2_bins -C initial_binning/metabat1_bins`	"The provided megahit co-assembly was binned with the metaWRAP, hybrid pipeline and using all available samples to inform the binning process. First, the assembly was binned using all the available binners in the ""metawrap binning"" module (concoct, metabat1, metabat2, maxbin2), then the top 3 bin sets (in this case they were metabat1, maxbin2, and metabat2) were combined into one final set with ""metawrap bin_refinement"" module (-c 50 -x 10). The remaining unbinned contigs were re-binned again using the same binners, and the best set (in this case from concoct) was appended to the clean metaWRAP bins for a more complete binning result."
new	new	MetaWRAP	v1.2.3	furious_pare_0	nan	https://quay.io/repository/biocontainers/metawrap?tab=tags	https://github.com/bxlab/metaWRAP	metawrap	`metawrap binning -a assembly.fasta -t 20 -m 1000 -l 500 -o initial_binning --metabat2 --metabat1 --maxbin2 --concoct --run-checkm READS/*`, `metawrap bin_refinement -o refinement -t 20 -m 1000 -c 50 -x 10 -A initial_binning/metabat2_bins -B initial_binning/maxbin2_bins -C initial_binning/concoct`	"The provided Gold co-assembly was binned with the metaWRAP, hybrid pipeline and using all available samples to inform the binning process. First, the assembly was binned using all the available binners in the ""metawrap binning"" module (concoct, metabat1, metabat2, maxbin2), then the top 3 bin sets (in this case they were concoct, maxbin2, and metabat2) were combined into one final set with ""metawrap bin_refinement"" module (-c 50 -x 10). The remaining unbinned contigs were re-binned again using the same binners, and the best set (in this case from concoct) was appended to the clean metaWRAP bins for a more complete binning result."
new	new	UltraBinner	DAS Tool(version 1.1.1), CONCOCT(v1.1.0), MetaBAT(v2.12.1), MetaBinner	pensive_sinoussi_0	Ziye Wang, Pingqin Huang,  Fengzhu Sun, Shanfeng Zhu	nan	https://github.com/Huangpq2019/UltraBinner	nan	nan	It is a method to use DAS Tool(v1.1.1) to integrate the results of three binners (CONCOCT V1.1.0, MetaBAT V2.12.1, MetaBinner) to calculate an optimized, non-redundant set of bins.  samples used: simulated short read and long read shotgun metagenome data from samples at different seafloor locations of a marine environment,  the gold standard assembly.
new	new	UltraBinner	DAS Tool(version 1.1.1), MetaBinner, CONCOCT(v1.1.0), MetaBAT(v2.12.1)	stoic_torvalds_0	Ziye Wang, Pingqin Huang,  Fengzhu Sun, Shanfeng Zhu	nan	https://github.com/Huangpq2019/UltraBinner	nan	nan	It is a method to use DAS Tool(v1.1.1) to integrate the results of three binners (CONCOCT V1.1.0, MetaBAT V2.12.1, MetaBinner) to calculate an optimized, non-redundant set of bins. The cluster number of MetaBinner is estimated by single-copy genes.  samples used: the megahit assembly of simulated short read and long read shotgun metagenome data from samples at different seafloor locations of a marine environment. 
new	new	UltraBinner	DAS Tool(version 1.1.1), MetaBinner, CONCOCT(v1.1.0), MetaBAT(v2.12.1)	stoic_torvalds_1	Ziye Wang, Pingqin Huang,  Fengzhu Sun, Shanfeng Zhu	nan	https://github.com/Huangpq2019/UltraBinner	nan	nan	It is a method to use DAS Tool(v1.1.1) to integrate the results of three binners (CONCOCT V1.1.0, MetaBAT V2.12.1, MetaBinner) to calculate an optimized, non-redundant set of bins. The cluster number of MetaBinner is 486.  samples used: the megahit assembly of simulated short read and long read shotgun metagenome data from samples at different seafloor locations of a marine environment. 
new	new	Vamb	fa045c0a4dcd78ca0098474d8f9d93ddb76a9bba	naughty_sammet_0	Jakob Nybo Nissen, Joachim Johansen, Rosa Lundbye Allesøe, Casper Kaae Sønderby, Jose Juan Almagro Armenteros, Christopher Heje Grønbech, Henrik Bjørn Nielsen, Thomas Nordahl Petersen, Ole Winther, Simon Rasmussen	nan	https://github.com/rasmussenlab/vamb	nan	vamb --outdir marine_vamb --fasta megahit_assembly_filtered2kbp.fna --bamfiles *.bam	"Samples used: MEGAHIT assembly, all samples. Our tool was used with pooled assembly, degraded performance expected compared to single-sample assembly. Some preprocessing was done using minimap2 (version 2.6.r623) and Samtools (version 1.9). The commands used were: # unzip assembly gunzip marmgCAMI2_short_read_pooled_megahit_assembly.fasta.gz; # remove all sequences < 2000 bp to create output megahit_assembly_filtered2kbp.fna # (used a homemade Python script for this, elided here) # index contigs using minimap2 minimap2 -x sr -d index.mmi megahit_assembly_filtered2kbp.fna; # map reads to contigs using BWA MEM to get BAM files for i in {0..9} do   minimap2 -t 4 -N 50 -ax sr index.mmi marmgCAMI2_short_read_sample_${i}_reads.fq.gz | samtools view -F 3584 -b --threads 3 > ${i}.bam end # then run our tool, see the field ""command line used"" in your submission form"
